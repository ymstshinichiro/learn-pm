-- IT・ソフトウェア開発プロジェクトマネジメントコース
-- Lesson 12: セキュリティマネジメントと脆弱性対応

DO $$
DECLARE
  v_course_id INT;
  v_lesson_id INT;
BEGIN
  -- Get course ID
  SELECT id INTO v_course_id FROM courses WHERE slug = 'it-software-pm';

  -- Lesson 12: セキュリティマネジメントと脆弱性対応
  INSERT INTO lessons (course_id, slug, title, content, "order", created_at)
  VALUES (
    v_course_id,
    'security-vulnerability-management',
    'セキュリティマネジメントと脆弱性対応',
    $CONTENT$# セキュリティマネジメントと脆弱性対応

セキュリティは**後から追加できない**ため、設計段階から組み込む「セキュリティ・バイ・デザイン」が不可欠です。

## セキュリティの基本原則

### CIA トライアド

セキュリティの3大要素：

| 要素 | 説明 | 脅威の例 | 対策 |
|------|------|---------|------|
| **機密性（Confidentiality）** | 情報が許可された者のみアクセス可能 | データ漏洩、盗聴 | 暗号化、アクセス制御 |
| **完全性（Integrity）** | 情報が改ざんされていない | データ改ざん、中間者攻撃 | デジタル署名、チェックサム |
| **可用性（Availability）** | 必要な時にサービスが利用可能 | DDoS攻撃、システム障害 | 冗長化、負荷分散 |

### 多層防御（Defense in Depth）

**原則：** 単一の防御に依存せず、複数の層で保護

```
物理層：データセンターのセキュリティ
    ↓
ネットワーク層：ファイアウォール、IDS/IPS
    ↓
ホスト層：OS のセキュリティ設定
    ↓
アプリケーション層：入力検証、認証・認可
    ↓
データ層：暗号化、アクセス制御
```

### 最小権限の原則

**原則：** ユーザー・プロセスに必要最小限の権限のみを付与

**実践：**
- 👤 ユーザーは必要な機能のみアクセス可能
- 🤖 アプリケーションは最小限のシステム権限で動作
- 🗄️ データベースユーザーは必要なテーブルのみアクセス

## 一般的な脆弱性（OWASP Top 10）

### OWASP Top 10 (2021)

#### 1. アクセス制御の不備

**問題：**
- 認可チェックの欠如
- 水平権限昇格（他ユーザーのデータにアクセス）
- 垂直権限昇格（管理者権限の不正取得）

**例：**
```javascript
// 脆弱なコード
app.get('/user/:id', (req, res) => {
  const userId = req.params.id;
  const user = db.getUser(userId); // 認可チェックなし
  res.json(user);
});

// 安全なコード
app.get('/user/:id', authenticate, (req, res) => {
  const userId = req.params.id;
  if (req.user.id !== userId && !req.user.isAdmin) {
    return res.status(403).json({ error: 'Forbidden' });
  }
  const user = db.getUser(userId);
  res.json(user);
});
```

#### 2. 暗号化の失敗

**問題：**
- 平文でのデータ保存・通信
- 弱い暗号化アルゴリズム（MD5、SHA-1）
- ハードコードされた暗号鍵

**対策：**
- 🔒 **転送時：** TLS 1.3
- 💾 **保存時：** AES-256
- 🔑 **パスワード：** bcrypt、Argon2
- 🗝️ **鍵管理：** AWS KMS、Azure Key Vault

#### 3. インジェクション

**SQLインジェクション：**
```javascript
// 脆弱なコード
const query = `SELECT * FROM users WHERE username = '${username}'`;

// 安全なコード（プリペアドステートメント）
const query = 'SELECT * FROM users WHERE username = ?';
db.execute(query, [username]);
```

**コマンドインジェクション：**
```python
# 脆弱なコード
os.system(f"ping {user_input}")

# 安全なコード
import subprocess
subprocess.run(["ping", "-c", "1", user_input], check=True)
```

#### 4. 安全でない設計

**問題：**
- セキュリティ要件の欠如
- 脅威モデリングの不実施
- セキュアコーディングパターンの不採用

**対策：**
- 🎯 セキュリティ要件の明確化
- 🔍 設計段階での脅威分析（STRIDE）
- 📚 セキュアコーディングガイドライン

#### 5. セキュリティ設定ミス

**典型例：**
- デフォルトのパスワード使用
- 不要なサービスの有効化
- エラーメッセージに機密情報を含む
- CORSの過度な許可

**対策：**
- ✅ セキュリティ設定のチェックリスト
- 🤖 自動スキャン（AWS Config、Azure Policy）
- 🔒 セキュアなデフォルト設定

#### 6. 脆弱で古いコンポーネント

**問題：**
- 古いライブラリ・フレームワークの使用
- 既知の脆弱性を持つ依存関係

**対策：**
- 📊 依存関係のスキャン（npm audit、Snyk、Dependabot）
- 🔄 定期的な更新
- 🚨 脆弱性アラートの監視

#### 7. 識別と認証の失敗

**問題：**
- 弱いパスワードポリシー
- セッション管理の不備
- 多要素認証（MFA）の不実施

**対策：**
- 🔐 強力なパスワードポリシー（8文字以上、複雑性）
- 🎫 セキュアなセッション管理（HTTPOnly、Secure フラグ）
- 📱 多要素認証（MFA）の導入
- 🔄 セッションタイムアウト

#### 8. ソフトウェアとデータの整合性の不備

**問題：**
- コードの改ざん検証なし
- 信頼できないソースからのダウンロード
- CI/CDパイプラインのセキュリティ不足

**対策：**
- ✅ コード署名
- 🔍 SBOMによる依存関係の管理
- 🔒 CI/CD パイプラインの保護

#### 9. セキュリティログとモニタリングの失敗

**問題：**
- 重要イベントのログ記録なし
- ログの監視・アラート不足
- インシデント対応の遅延

**対策：**
- 📝 包括的なログ記録
- 🔔 リアルタイムアラート
- 📊 SIEM（Security Information and Event Management）

#### 10. サーバーサイドリクエストフォージェリ（SSRF）

**問題：**
- ユーザー入力URLへの検証なしアクセス
- 内部リソースへの不正アクセス

**対策：**
- ✅ URLホワイトリスト
- 🚫 内部IPへのアクセス制限
- 🔍 リダイレクト先の検証

## セキュリティテスト

### 静的アプリケーションセキュリティテスト（SAST）

**目的：** ソースコードの脆弱性を検出

**ツール：**
- SonarQube
- Checkmarx
- Fortify
- Semgrep

**利点：**
- ✅ 開発初期に発見
- ✅ 誤検知が少ない
- ✅ 修正箇所が明確

**欠点：**
- ⚠️ 実行時の問題は検出不可
- ⚠️ 設定ミスは検出困難

### 動的アプリケーションセキュリティテスト（DAST）

**目的：** 実行中のアプリケーションを攻撃して脆弱性を検出

**ツール：**
- OWASP ZAP
- Burp Suite
- Acunetix

**利点：**
- ✅ 実際の攻撃をシミュレート
- ✅ 設定ミスも検出

**欠点：**
- ⚠️ 実行環境が必要
- ⚠️ 誤検知が多い可能性

### ペネトレーションテスト

**定義：** 実際の攻撃者の視点でシステムを攻撃

**種類：**

| 種類 | 情報 | 目的 |
|------|------|------|
| **ブラックボックス** | 事前情報なし | 外部攻撃者の視点 |
| **グレーボックス** | 部分的な情報 | 一般ユーザーの視点 |
| **ホワイトボックス** | 全情報あり | 内部者の視点 |

**実施タイミング：**
- 🎯 主要リリース前
- 📅 年1回の定期実施
- 🔄 大きなアーキテクチャ変更後

### セキュリティコードレビュー

**チェック項目：**
- ✅ 入力検証の実施
- ✅ 出力エスケープ
- ✅ 認証・認可の確認
- ✅ 機密情報のハードコードなし
- ✅ エラーハンドリングの適切性

## 脆弱性管理プロセス

### 脆弱性のライフサイクル

```
発見 → トリアージ → 評価 → 修正 → 検証 → クローズ
```

### CVSSスコア（Common Vulnerability Scoring System）

**評価基準：**
- 攻撃の容易性
- 攻撃に必要な権限
- ユーザー操作の有無
- 影響範囲（機密性・完全性・可用性）

**スコアの解釈：**

| スコア | 深刻度 | 対応 |
|-------|-------|------|
| 9.0-10.0 | Critical | 即座に修正（24時間以内） |
| 7.0-8.9 | High | 1週間以内に修正 |
| 4.0-6.9 | Medium | 1ヶ月以内に修正 |
| 0.1-3.9 | Low | 計画的に修正 |

### 脆弱性の優先順位付け

**考慮要素：**
1. 📊 **CVSSスコア**
2. 🎯 **悪用可能性**（公開されたExploitの有無）
3. 🌐 **影響範囲**（インターネット公開か内部か）
4. 💎 **データの機密性**（個人情報、決済情報など）

**優先順位：**
```
Critical × 公開Exploit × インターネット公開 = 最優先
Low × Exploit不明 × 内部のみ = 低優先
```

## インシデント対応

### セキュリティインシデントの種類

| 種類 | 例 |
|------|---|
| **不正アクセス** | アカウント乗っ取り、システム侵入 |
| **マルウェア感染** | ランサムウェア、トロイの木馬 |
| **データ漏洩** | 個人情報流出、機密情報の漏洩 |
| **サービス拒否** | DDoS攻撃 |
| **内部不正** | 従業員による情報持ち出し |

### インシデント対応の6フェーズ（NIST）

#### 1. 準備（Preparation）

**実施内容：**
- 📋 インシデント対応計画の策定
- 👥 CSIRTチームの編成
- 🔧 ツールの準備（フォレンジックツールなど）
- 🎓 トレーニング・演習

#### 2. 検知と分析（Detection & Analysis）

**検知手段：**
- 🚨 IDS/IPS アラート
- 📊 異常なログパターン
- 📞 ユーザーからの報告
- 🔍 脅威インテリジェンス

**分析：**
- 🎯 インシデントの種類特定
- 📊 影響範囲の評価
- ⏱️ タイムライン作成

#### 3. 封じ込め（Containment）

**短期的封じ込め：**
- 🚫 攻撃元IPのブロック
- 🔌 感染システムのネットワーク切断
- 🔒 侵害されたアカウントの無効化

**長期的封じ込め：**
- 🔄 システムのパッチ適用
- 🔐 パスワードの全体変更
- 🛡️ 追加の監視・防御策

#### 4. 根絶（Eradication）

**実施内容：**
- 🦠 マルウェアの削除
- 🚪 バックドアの除去
- 🔒 脆弱性の修正

#### 5. 復旧（Recovery）

**実施内容：**
- 🔄 システムの復元
- ✅ 正常動作の確認
- 📊 監視強化

#### 6. 事後対応（Post-Incident Activity）

**実施内容：**
- 📝 インシデントレポート作成
- 🔍 根本原因分析
- 📚 教訓の文書化
- 🔄 対応手順の改善

### CSIRT（Computer Security Incident Response Team）

**役割：**
- 🚨 インシデント対応の中心
- 📊 脅威情報の収集・分析
- 📚 セキュリティ教育
- 🤝 外部組織との連携

**メンバー構成：**
- セキュリティエンジニア
- システム管理者
- 法務担当
- 広報担当
- 経営層

## セキュアな開発ライフサイクル

### セキュリティ・バイ・デザイン

**各フェーズでのセキュリティ活動：**

| フェーズ | 活動 |
|---------|------|
| **要件定義** | セキュリティ要件の定義 |
| **設計** | 脅威モデリング（STRIDE） |
| **実装** | セキュアコーディング |
| **テスト** | SAST、DAST、ペネトレーションテスト |
| **リリース** | セキュリティレビュー |
| **運用** | 監視、ログ分析、インシデント対応 |

### 脅威モデリング（STRIDE）

**6つの脅威カテゴリ：**

| 脅威 | 説明 | 対策 |
|------|------|------|
| **S**poofing（なりすまし） | 他人のIDを使う | 認証強化 |
| **T**ampering（改ざん） | データを不正に変更 | 完全性チェック |
| **R**epudiation（否認） | 行動を否定 | ログ記録 |
| **I**nformation Disclosure（情報漏洩） | 機密情報の漏洩 | 暗号化 |
| **D**enial of Service（サービス拒否） | サービスを使えなくする | レート制限 |
| **E**levation of Privilege（権限昇格） | 不正に権限を取得 | 最小権限 |

## コンプライアンス

### 主要な法規制・標準

| 法規制/標準 | 対象 | 要件 |
|-----------|------|------|
| **GDPR** | EU市民の個人データ | 同意取得、削除権、漏洩通知 |
| **個人情報保護法** | 日本国内 | 適切な取得・管理・開示 |
| **PCI DSS** | クレジットカード情報 | 暗号化、アクセス制御、監査 |
| **HIPAA** | 医療情報（米国） | 機密性、完全性、可用性 |
| **ISO 27001** | 情報セキュリティ | ISMSの構築・運用 |

### データ保護の原則

**GDPR の7原則：**
1. **適法性・公正性・透明性**
2. **目的の限定**
3. **データの最小化**
4. **正確性**
5. **保存期間の制限**
6. **完全性・機密性**
7. **説明責任**

## セキュリティ教育と文化

### セキュリティ意識の向上

**定期的なトレーニング：**
- 📚 新入社員向けセキュリティ研修
- 🎓 年1回のリフレッシャートレーニング
- 🎣 フィッシングメール訓練
- 🎯 ロールベースの専門トレーニング

### セキュアコーディングのプラクティス

**チェックリスト：**
- ✅ 入力は全て検証（ホワイトリスト方式）
- ✅ 出力は全てエスケープ
- ✅ 認証・認可を適切に実装
- ✅ 機密情報をログに記録しない
- ✅ エラーメッセージに機密情報を含めない
- ✅ セキュアな乱数生成器を使用
- ✅ ハードコードされた認証情報なし

### セキュリティチャンピオン制度

**概念：**
- 各チームにセキュリティ担当者を配置
- セキュリティチームと開発チームの橋渡し
- セキュリティ知識の啓蒙

**役割：**
- 🎓 チーム内のセキュリティ教育
- 🔍 コードレビューでのセキュリティチェック
- 📢 セキュリティ情報の共有

💡 **セキュリティは「誰かの仕事」ではなく「全員の責任」です。開発の初期段階から組み込み、継続的に改善し、チーム全体でセキュリティ文化を育てることが、長期的な安全性を実現します。**$CONTENT$,
    12,
    NOW()
  ) RETURNING id INTO v_lesson_id;

  -- Lesson 12: Questions (ひっかけ問題スタイル)
  INSERT INTO questions (lesson_id, type, question, options, correct_answer, explanation, "order", created_at)
  VALUES
    (v_lesson_id, 'multiple-choice', '「多層防御（Defense in Depth）」の最も重要な原則はどれですか？',
     ARRAY['最も強力なファイアウォールを導入し、単一の強固な防御層でシステムを守る', '複数の異なる防御層を組み合わせ、一つが破られても他の層で保護する', 'すべての防御層を同じ技術で統一し、管理を簡単にする', 'コストを抑えるため、最も脆弱な箇所にのみ防御を集中させる'],
     ARRAY['複数の異なる防御層を組み合わせ、一つが破られても他の層で保護する'],
     'Bが正解です。多層防御は「単一障害点を作らない」ことが原則で、ネットワーク層・ホスト層・アプリケーション層・データ層など、異なる層で防御します。Aの単一防御は一点突破されると全滅、Cの同じ技術での統一は同じ脆弱性で全層が破られるリスク、Dは脆弱な箇所以外が無防備になります。セキュリティは「どれか一つ」ではなく「重ねて守る」アプローチが重要です。',
     1, NOW()),
    (v_lesson_id, 'multiple-answer', 'OWASP Top 10 に含まれる脆弱性として適切なものを全て選択してください。',
     ARRAY['SQLインジェクション', 'アクセス制御の不備', 'コードの可読性の低さ', '脆弱で古いコンポーネントの使用'],
     ARRAY['SQLインジェクション', 'アクセス制御の不備', '脆弱で古いコンポーネントの使用'],
     'A、B、Dが OWASP Top 10 に含まれる脆弱性です。Cの「コードの可読性」は品質の問題であり、セキュリティ脆弱性ではありません。OWASP Top 10 は実際にセキュリティ侵害につながる脆弱性を扱っており、Aのインジェクション（Top 3）、Bのアクセス制御不備（Top 1）、Dの古いコンポーネント（Top 6）は重要な脆弱性です。コードの品質とセキュリティ脆弱性を混同しないことが重要です。',
     2, NOW()),
    (v_lesson_id, 'multiple-choice', 'CVSSスコアが9.5（Critical）の脆弱性が発見されたが、その脆弱性は内部ネットワークでのみ悪用可能で、公開されたExploitコードもない場合、最も適切な対応はどれですか？',
     ARRAY['CVSSがCriticalなので、即座に全システムを停止して修正する', 'CVSSスコアと悪用可能性・影響範囲を総合的に評価し、優先順位を決定する', 'Exploitコードがないため、対応を後回しにして通常の開発を優先する', 'CVSSスコアは無視し、内部ネットワークなので対応不要と判断する'],
     ARRAY['CVSSスコアと悪用可能性・影響範囲を総合的に評価し、優先順位を決定する'],
     'Bが正解です。脆弱性の優先順位は、CVSSスコアだけでなく、悪用可能性（Exploitの有無）、影響範囲（公開/内部）、データの機密性などを総合的に評価すべきです。Aは過剰反応でビジネスへの影響が大きく、Cは楽観的すぎ（内部からの攻撃も考慮すべき）、DはCVSSスコアを完全に無視しており危険です。Critical でも即座に全停止ではなく、リスクとビジネス影響のバランスで判断します。',
     3, NOW()),
    (v_lesson_id, 'multiple-answer', 'セキュリティインシデント対応で「封じ込め（Containment）」フェーズで実施すべき対応を全て選択してください。',
     ARRAY['攻撃元IPアドレスをファイアウォールでブロックする', '侵害されたシステムのネットワークを切断する', '根本原因を完全に特定し、恒久対策を実施する', '侵害されたアカウントのパスワードを変更し、無効化する'],
     ARRAY['攻撃元IPアドレスをファイアウォールでブロックする', '侵害されたシステムのネットワークを切断する', '侵害されたアカウントのパスワードを変更し、無効化する'],
     'A、B、Dが封じ込めフェーズの対応です。封じ込めは「被害拡大を防ぐ」ことが目的で、短期的・暫定的な措置を取ります。Cの「根本原因の特定と恒久対策」は次の「根絶（Eradication）」フェーズで行います。インシデント対応は「検知→封じ込め→根絶→復旧→事後対応」の順で、まず被害拡大を止め、その後に根本対策を行います。混同すると対応が遅れ、被害が拡大します。',
     4, NOW()),
    (v_lesson_id, 'multiple-choice', 'STRIDE脅威モデリングで「Repudiation（否認）」への対策として最も適切なのはどれですか？',
     ARRAY['強力な認証機構（多要素認証）を導入し、なりすましを防ぐ', '包括的な監査ログを記録し、ユーザーの行動を追跡可能にする', 'データベースへのアクセスを最小権限に制限し、不正アクセスを防ぐ', '通信を暗号化し、データの盗聴を防ぐ'],
     ARRAY['包括的な監査ログを記録し、ユーザーの行動を追跡可能にする'],
     'Bが正解です。Repudiation（否認）は「ユーザーが自分の行動を否定する」脅威であり、対策は「否定できないようにする」ことです。包括的なログ記録により、「誰が・いつ・何をしたか」を証明できます。Aは Spoofing（なりすまし）、Cは Elevation of Privilege（権限昇格）、Dは Information Disclosure（情報漏洩）への対策です。STRIDEの各脅威と対策の対応関係を正しく理解することが重要です。',
     5, NOW());

END $$;
