-- Update lesson content for PM Beginner course with improved Markdown formatting

DO $$
DECLARE
  v_course_id INT;
BEGIN
  SELECT id INTO v_course_id FROM courses WHERE slug = 'pm-beginner';

  -- Lesson 1: プロジェクトとは何か
  UPDATE lessons SET content = E'# プロジェクトとは何か

プロジェクトは、**独自の成果物やサービスを生み出すための一時的な活動**です。

## プロジェクトの2つの重要な特徴

### 1. 一時的（Temporary）
プロジェクトには必ず**明確な開始と終了**があります。期限が定められており、永続的に続く活動ではありません。

### 2. 独自性（Unique）
プロジェクトは**新しい何か**を生み出します。同じプロジェクトは二度と存在しません。

**例：**
- ✅ 新製品の開発プロジェクト
- ✅ 新店舗の開設プロジェクト
- ✅ システム導入プロジェクト
- ❌ 日々の経理処理（定常業務）
- ❌ 在庫管理業務（定常業務）

## プロジェクトと定常業務（オペレーション）の違い

| 項目 | プロジェクト | 定常業務 |
|------|------------|---------|
| 期間 | 一時的（開始と終了がある） | 継続的（終わりがない） |
| 成果物 | 独自のもの | 反復的・定型的 |
| 目的 | 新しい価値の創造 | 既存業務の維持 |
| 例 | 新製品開発、イベント開催 | 月次決算、顧客サポート |

## なぜプロジェクトマネジメントが必要か

プロジェクトは独自性と不確実性を持つため、計画的な管理が不可欠です。適切なマネジメントにより、限られたリソース（人・時間・予算）を効果的に使い、目標を達成します。'
  WHERE course_id = v_course_id AND slug = 'what-is-project';

  -- Lesson 2: プロジェクトマネージャーの役割
  UPDATE lessons SET content = E'# プロジェクトマネージャーの役割

プロジェクトマネージャー（PM）は、**プロジェクトの成功に責任を持つリーダー**です。

## PMの主な責任

### 1. プロジェクト目標の達成
計画の立案から実行、完了まで、プロジェクト全体を統括します。

### 2. 三大制約のバランス管理

PMは以下の3つの要素をバランスよく管理する必要があります：

| 制約 | 内容 |
|------|------|
| **スコープ** | 何を作るか（範囲） |
| **スケジュール** | いつまでに完成させるか（時間） |
| **コスト** | いくらで実現するか（予算） |

この3つに**品質**を加えた4要素の管理がPMの基本です。

## PMに求められる能力

### マネジメントスキル
- 📊 計画立案と進捗管理
- 💰 予算管理とリスク対応
- 📝 文書作成と報告

### リーダーシップ
- 🎯 ビジョンの提示と目標設定
- 👥 チームメンバーのモチベーション維持
- 🤝 ステークホルダーとの調整

### コミュニケーション
- 💬 明確な情報伝達
- 👂 メンバーの意見を聴く
- 🔄 適切なフィードバック

## PMがやってはいけないこと

- ❌ すべての作業を自分でやろうとする
- ❌ メンバーに指示だけして放置する
- ❌ 問題を隠蔽する
- ❌ 上司の指示を待つだけで主体性を持たない

✅ **PMは管理者ではなく、チームを成功に導くリーダーです。**'
  WHERE course_id = v_course_id AND slug = 'pm-role';

  -- Lesson 3: プロジェクトライフサイクル
  UPDATE lessons SET content = E'# プロジェクトライフサイクル

プロジェクトは、**5つのプロセス群**を経て進行します。

## PMBOKの5つのプロセス群

### 1. 立上げ（Initiating）
プロジェクトを正式に開始する段階
- ✅ プロジェクト憲章の作成
- ✅ ステークホルダーの特定
- ✅ PMの任命

### 2. 計画（Planning）
詳細な実行計画を策定する段階
- ✅ スコープの定義
- ✅ スケジュールとコストの見積もり
- ✅ リスクの特定と対応策の計画
- ✅ チーム編成と役割分担

### 3. 実行（Executing）
計画に基づいて作業を遂行する段階
- ✅ 成果物の作成
- ✅ チームメンバーの指揮
- ✅ 品質保証の実施
- ✅ ステークホルダーとのコミュニケーション

### 4. 監視・コントロール（Monitoring and Controlling）
進捗を追跡し、必要に応じて調整する段階
- ✅ 実績と計画の比較
- ✅ 変更管理
- ✅ リスクの監視
- ✅ 是正措置の実施

### 5. 終結（Closing）
プロジェクトを正式に完了させる段階
- ✅ 成果物の引き渡し
- ✅ 契約のクローズ
- ✅ 教訓（Lessons Learned）の文書化
- ✅ チームの解散

## 重要なポイント

💡 **これらのプロセスは直線的ではありません**

プロジェクトは段階的に進みますが、必要に応じて前のプロセスに戻ったり、複数のプロセスが並行して実行されることもあります。

**例：** 実行中に新たなリスクが見つかれば、計画プロセスに戻って対応策を練り直します。'
  WHERE course_id = v_course_id AND slug = 'project-lifecycle';

  -- Lesson 4: プロジェクト立上げと憲章
  UPDATE lessons SET content = E'# プロジェクト立上げと憲章

プロジェクト憲章（Project Charter）は、**プロジェクトを正式に承認し、PMに権限を与える重要文書**です。

## プロジェクト憲章とは

プロジェクトの「許可証」のようなもので、以下の役割を果たします：

### 📜 憲章の役割
- ✅ プロジェクトの正式な承認
- ✅ PMへの権限付与
- ✅ プロジェクト目的の明確化
- ✅ 組織的な支援の確保

## 憲章に含まれる内容

| 項目 | 内容 |
|------|------|
| **プロジェクトの目的** | なぜこのプロジェクトを行うのか |
| **ビジネス上の正当性** | どんな価値があるのか |
| **ハイレベルな要求事項** | 何を実現するのか（概要） |
| **成功基準** | 何をもって成功とするか |
| **主要なステークホルダー** | 誰が関わるのか |
| **概算予算** | おおよそいくらかかるか |
| **概算スケジュール** | おおよそいつまでか |
| **プロジェクトマネージャー** | 誰が責任者か |

## 憲章に含まれないもの

❌ 詳細なスケジュール → これは計画プロセスで作成
❌ 詳細なWBS → これは計画プロセスで作成
❌ 技術的な仕様書 → これは計画プロセスで作成
❌ リスクの詳細リスト → これは計画プロセスで作成

💡 **憲章はハイレベル（概要レベル）の文書です**

## 誰が憲章を発行するか

憲章は、**プロジェクトスポンサーや上位の承認者**が発行します。
PMは憲章を作成することはありますが、承認するのは上位者です。

## PMが正式に任命されるタイミング

✅ **プロジェクト憲章の作成時または承認時**

できるだけ早期にPMを任命することで、計画フェーズから主体的に関わることができます。'
  WHERE course_id = v_course_id AND slug = 'project-charter';

  -- Lesson 5: スコープとWBS
  UPDATE lessons SET content = E'# スコープとWBS

## スコープとは

**スコープ（Scope）= プロジェクトで実施する作業と生み出す成果物の範囲**

### スコープ定義の重要性

明確なスコープ定義により：
- ✅ 何をやるか、何をやらないかが明確になる
- ✅ メンバーの認識のズレを防ぐ
- ✅ 見積もりの精度が向上する
- ✅ 無駄な作業を防ぐ

## WBS（Work Breakdown Structure）

WBSは、**プロジェクトの全作業を階層的に分解して整理する手法**です。

### WBSの構造

```
プロジェクト全体
├── 大項目1
│   ├── 中項目1-1
│   │   ├── 小項目1-1-1（ワークパッケージ）
│   │   └── 小項目1-1-2（ワークパッケージ）
│   └── 中項目1-2
└── 大項目2
    └── ...
```

### ワークパッケージとは

最下層の作業単位のことで、以下の特徴があります：
- 📅 所要時間を見積もれる
- 💰 コストを見積もれる
- 👤 担当者を割り当てられる
- 📊 進捗を測定できる

## WBSのメリット

| メリット | 説明 |
|---------|------|
| **作業の見える化** | 全体像が把握できる |
| **責任の明確化** | 誰が何をやるかがわかる |
| **見積もりの精度向上** | 小さく分けるほど正確に見積もれる |
| **進捗管理の容易化** | どこまで終わったかがわかる |
| **漏れの防止** | 必要な作業を洗い出せる |

## スコープクリープに注意！

**スコープクリープ** = 承認なしに作業範囲が拡大する現象

### スコープクリープの原因
- ❌ 曖昧な要求事項
- ❌ ステークホルダーからの追加要望
- ❌ 「ついでに」という軽い気持ち
- ❌ 変更管理プロセスの欠如

### 対策
- ✅ 明確なスコープ定義
- ✅ 変更管理プロセスの確立
- ✅ ステークホルダーとの合意文書
- ✅ 「やらないこと」も明文化する

💡 **スコープクリープはスケジュール遅延とコスト超過の主要因です**'
  WHERE course_id = v_course_id AND slug = 'scope-and-wbs';

  -- Lesson 6: スケジュール管理の基本
  UPDATE lessons SET content = E'# スケジュール管理の基本

プロジェクトを期限内に完了させるため、**作業の順序、所要期間、依存関係を計画し、進捗を管理**します。

## 主なスケジュール管理ツール

### 1. ガントチャート

各タスクの期間と並行関係を**棒グラフ**で表現

**メリット：**
- ✅ 視覚的にわかりやすい
- ✅ タスクの並行関係が一目瞭然
- ✅ 進捗状況を把握しやすい

### 2. ネットワーク図（PERT/CPM）

作業の依存関係を**矢線と丸（ノード）**で表現

**メリット：**
- ✅ 作業の順序関係が明確
- ✅ クリティカルパスを特定できる
- ✅ どの作業が重要かわかる

## クリティカルパスとは

**プロジェクト全体の所要期間を決定する最長の作業経路**

### クリティカルパスの特徴

🔴 **この経路上の作業が遅れると、プロジェクト全体が遅れる**

- スラック（余裕時間）がゼロ
- 最優先で管理すべき作業
- リソース配分の重点対象

### クリティカルパス上にない作業

✅ スラック（余裕時間）がある
→ 多少遅れても全体には影響しない（ただし管理は必要）

## 進捗管理の手法

### 1. 計画値（PV）と実績値（EV）の比較

| 指標 | 意味 |
|------|------|
| **PV (Planned Value)** | 計画上、この時点で達成しているべき価値 |
| **EV (Earned Value)** | 実際に達成した価値 |
| **AC (Actual Cost)** | 実際にかかったコスト |

### 2. スケジュール差異（SV）

**SV = EV - PV**

- SV > 0 → 進んでいる ✅
- SV = 0 → 予定通り ✅
- SV < 0 → 遅れている ❌

### 3. 是正措置

進捗が遅れている場合の対策：
- 🚀 リソースを追加する
- 🔄 作業の並行化を進める
- ✂️ スコープを見直す（優先度の低い機能を削る）
- 📅 スケジュールを再調整する

💡 **早期発見・早期対処が遅延を最小化する鍵です**'
  WHERE course_id = v_course_id AND slug = 'schedule-management';

  -- Lesson 7: リスクマネジメント入門
  UPDATE lessons SET content = E'# リスクマネジメント入門

## リスクとは

**発生するかどうか不確実だが、発生すればプロジェクト目標に影響を与える事象**

### リスクと問題の違い

| 項目 | リスク | 問題（Issue） |
|------|--------|--------------|
| 発生 | 未確定（起こるかもしれない） | 既に発生している |
| 対応 | 事前に対策を講じる | 今すぐ対処する |
| 例 | 「主要メンバーが退職するかもしれない」 | 「主要メンバーが退職した」 |

## リスク管理のプロセス

### 1. リスクの特定
どんなリスクがあるか洗い出す

**特定の方法：**
- 💡 ブレーンストーミング
- 📋 過去プロジェクトの教訓
- 👥 専門家へのインタビュー
- 📊 チェックリストの活用

### 2. リスクの分析
発生確率と影響度を評価

| 影響度 ＼ 確率 | 低 | 中 | 高 |
|---------------|----|----|-----|
| **大** | 🟨 | 🟧 | 🟥 |
| **中** | 🟩 | 🟨 | 🟧 |
| **小** | 🟩 | 🟩 | 🟨 |

- 🟥 最優先で対応
- 🟧 重要、対応を計画
- 🟨 監視が必要
- 🟩 受容可能

### 3. リスク対応策の計画

## リスク対応の4つの戦略

### 1. 回避（Avoid）
リスクを完全に排除する

**例：**
- 🚫 不確実性の高い技術を使わない
- 🚫 リスクの高い業者を選定しない

### 2. 転嫁（Transfer）
リスクの責任と影響を第三者に移す

**例：**
- 🏢 保険に加入する
- 📝 外部ベンダーに委託する（固定価格契約）

### 3. 軽減（Mitigate）
発生確率または影響度を減らす

**例：**
- 🔄 バックアップ計画を作る
- 👨‍🏫 事前にトレーニングを実施する
- 🧪 プロトタイプで検証する

### 4. 受容（Accept）
対策を講じず、発生したら対処する

**例：**
- 💰 コンティンジェンシー予備（予備費）を確保
- 📋 発生時の対応手順を準備

## リスク登録簿（Risk Register）

リスクを一元管理する台帳

| 記録内容 | 説明 |
|---------|------|
| リスクID | 識別番号 |
| リスク内容 | 何が起こりうるか |
| 発生確率 | どのくらい起こりそうか |
| 影響度 | 起こったらどれだけ大変か |
| 対応策 | どう対処するか |
| 担当者 | 誰が監視するか |
| ステータス | 現状どうなっているか |

💡 **リスク管理は「保険」。事前の備えがプロジェクトを守ります。**'
  WHERE course_id = v_course_id AND slug = 'risk-management-basics';

  -- Lesson 8: チームマネジメントの基礎
  UPDATE lessons SET content = E'# チームマネジメントの基礎

プロジェクトの成功は、**チームの力**に依存します。

## 高パフォーマンスチームの条件

### ✅ 必要な要素
- 🎯 明確な共通目標
- 🤝 メンバー間の信頼
- 💬 オープンなコミュニケーション
- 👥 協力を促す文化
- 🎉 成果の承認と称賛

### ❌ 避けるべきこと
- 競争を煽る
- 一方的な命令と服従
- 意見交換の制限
- 失敗の責任追及

## タックマンモデル：チームの発達段階

チームは以下の**5つの段階**を経て成熟します。

### 1. 形成期（Forming）
メンバーが集まり、互いを知る段階

**特徴：**
- 😊 遠慮がある
- 🤔 様子見の雰囲気
- 📋 役割や期待の確認

**PMの役割：**
- チームの目標を明確に示す
- メンバー同士の紹介を促進
- 基本ルールを設定

### 2. 混乱期（Storming）
意見の対立が生じる段階

**特徴：**
- 😤 意見の衝突
- 🌪️ 役割や責任に関する摩擦
- 💥 不満の表出

**PMの役割：**
- 対立を恐れず、建設的な議論を促す
- 共通の目標を再確認
- 信頼関係構築を支援

### 3. 統一期（Norming）
ルールや役割が定まる段階

**特徴：**
- 🤝 協力関係の構築
- 📜 作業方法の確立
- 👍 チームとしての一体感

**PMの役割：**
- 良い行動を称賛
- チームの自律性を尊重
- サポート体制の整備

### 4. 機能期（Performing）
高いパフォーマンスを発揮する段階

**特徴：**
- 🚀 高い生産性
- 🎯 目標達成への集中
- 🔄 自律的な問題解決

**PMの役割：**
- 障害の除去に専念
- 成果を組織に共有
- チームに権限委譲

### 5. 解散期（Adjourning）
プロジェクト終了に伴いチームが解散

**特徴：**
- 😢 別れの寂しさ
- 🎉 達成感の共有
- 📝 次への準備

**PMの役割：**
- 成果を祝う
- 個人の貢献を認める
- 次のキャリアを支援

## モチベーション管理

### メンバーのモチベーションを高める方法

| 行動 | 効果 |
|------|------|
| 🎯 **明確な目標設定** | 何を目指すか明確 |
| 💬 **定期的なフィードバック** | 成長を実感できる |
| 🎉 **成果の承認** | 努力が報われる |
| 🛠️ **適切な権限委譲** | 自律性が高まる |
| 🤝 **メンバーへの信頼** | やりがいを感じる |

💡 **人はやらされているのではなく、自ら選んでいると感じるときに最も力を発揮します。**'
  WHERE course_id = v_course_id AND slug = 'team-management';

  -- Lesson 9: コミュニケーションマネジメント
  UPDATE lessons SET content = E'# コミュニケーションマネジメント

プロジェクトの大半の問題は、**コミュニケーション不足**に起因します。

## コミュニケーションの重要性

### 統計データ
- 📊 PMの時間の**70～90%**はコミュニケーションに費やされる
- 🚨 プロジェクト失敗の主要因の**1位**はコミュニケーション不足

## コミュニケーション計画

**「誰に、何を、いつ、どのように」伝えるかを計画する**

| 項目 | 内容 |
|------|------|
| **誰に** | ステークホルダー（顧客、経営層、チーム等） |
| **何を** | 進捗報告、課題、リスク、成果物等 |
| **いつ** | 毎週月曜、マイルストーン達成時等 |
| **どのように** | 会議、メール、報告書、チャット等 |

### 計画の目的
- ✅ 必要な情報が適切に届く
- ✅ 無駄な会議を減らす
- ✅ 情報の抜け漏れを防ぐ

## 報告・連絡・相談（ホウレンソウ）

### 📢 報告（Report）
指示された事項や進捗状況を伝える

**タイミング：**
- 定期的な進捗報告
- タスク完了時
- 問題発生時（すぐに！）

### 📞 連絡（Inform）
関係者に情報を共有する

**例：**
- スケジュール変更
- メンバーの休暇予定
- 会議の日程調整

### 🤔 相談（Consult）
判断に迷ったときにアドバイスを求める

**タイミング：**
- 重要な意思決定の前
- 問題解決の方法を検討するとき
- 専門知識が必要なとき

## 効果的な会議運営

### 会議の前
- 📋 明確な議題を設定
- 📧 事前に資料を共有
- ⏰ 開始・終了時刻を明示
- 👥 必要な参加者のみ招集

### 会議中
- 🎯 議題に集中する
- ⏱️ 時間を守る
- 📝 議事録を取る
- ✅ アクションアイテムと担当者を明確化

### 会議の後
- 📄 議事録を速やかに共有
- ✅ アクションアイテムをフォロー
- 🔄 決定事項を関係者に展開

## コミュニケーションの失敗例

| 失敗例 | 結果 |
|--------|------|
| ❌ 進捗報告をしない | 問題の早期発見ができず手遅れに |
| ❌ 曖昧な指示 | メンバーが何をすべきかわからず混乱 |
| ❌ 一方的な伝達のみ | メンバーの意見を聞かず不満が蓄積 |
| ❌ 文書化しない | 言った言わないの争いが発生 |
| ❌ 情報の抱え込み | チーム全体の判断が遅れる |

## 効果的なコミュニケーションの原則

### ✅ 5C原則

1. **Clear（明確）** - 曖昧さを排除
2. **Concise（簡潔）** - 要点を絞る
3. **Concrete（具体的）** - 抽象的な表現を避ける
4. **Correct（正確）** - 事実に基づく
5. **Courteous（丁寧）** - 敬意を持って

💡 **良いコミュニケーションは、プロジェクト成功の基盤です。**'
  WHERE course_id = v_course_id AND slug = 'communication-management';

  -- Lesson 10: プロジェクト終結と振り返り
  UPDATE lessons SET content = E'# プロジェクト終結と振り返り

プロジェクトの最後のフェーズは、**終結（Closing）**です。単に作業を終えるだけでなく、正式な手続きと振り返りが重要です。

## 終結プロセスの活動

### 1. 成果物の正式な引き渡し

**ポイント：**
- 📦 成果物の完成確認
- ✍️ 顧客・スポンサーからの正式な承認
- 📄 引き渡し文書への署名

### 2. 契約の完了

**活動：**
- 📝 契約書に基づく完了確認
- 💰 最終支払いの処理
- 🤝 ベンダーとの関係クローズ

### 3. 文書のアーカイブ

**保管すべき文書：**
- プロジェクト計画書
- 変更管理記録
- リスク登録簿
- 会議議事録
- 成果物の仕様書

💡 **将来のプロジェクトの参考資料として組織の財産になります**

### 4. リソースの解放

**活動：**
- 👥 チームメンバーの解散
- 💻 設備・機材の返却
- 💰 予算の精算

### 5. チームへの感謝と評価

**重要性：**
- 🎉 達成を祝う
- 🏆 貢献を認める
- 💬 個別フィードバック

## Lessons Learned（教訓）

**プロジェクトから得られた学びを整理し、次に活かす**

### 記録すべき内容

#### ✅ 成功要因（うまくいったこと）
- 何が成功につながったか
- なぜうまくいったのか
- 次も続けるべき行動

**例：**
- 毎週の進捗会議が問題の早期発見につながった
- プロトタイプ開発で要件の認識齟齬を防げた
- チーム内の情報共有ツールが効果的だった

#### ❌ 失敗要因（うまくいかなかったこと）
- 何が問題だったか
- なぜ問題が起きたのか
- 次はどう改善すべきか

**例：**
- 初期のリスク分析が不十分で後半に問題が集中
- ステークホルダーとの合意が曖昧で手戻りが発生
- 見積もりが楽観的すぎてスケジュール遅延

### Lessons Learnedの活用

| 活用方法 | 効果 |
|---------|------|
| 📚 **組織の知識ベースに蓄積** | 全社で共有 |
| 🎓 **次のプロジェクトで参照** | 同じ失敗を繰り返さない |
| 👨‍🏫 **新人教育の材料** | 実例から学ぶ |
| 📈 **プロセス改善** | 組織全体の成熟度向上 |

## 終結を軽視してはいけない理由

### 終結を省略すると…

- ❌ 成果物の承認が曖昧になる
- ❌ 未完了タスクが放置される
- ❌ 得られた知見が失われる
- ❌ メンバーの達成感が薄れる
- ❌ 契約上のトラブルが残る

### 適切な終結により…

- ✅ 明確な区切りがつく
- ✅ 組織の知見が蓄積される
- ✅ メンバーの満足度が高まる
- ✅ 次のプロジェクトがスムーズに始まる
- ✅ ステークホルダーとの良好な関係維持

## 終結後の最終報告会

### 報告内容
- 📊 最終的な成果
- 💰 予算実績
- 📅 スケジュール実績
- 🎯 目標達成度
- 📝 主要な課題と対応
- 💡 得られた教訓

💡 **「終わり良ければ全て良し」—適切な終結が次の成功につながります。**'
  WHERE course_id = v_course_id AND slug = 'project-closure';

END $$;
