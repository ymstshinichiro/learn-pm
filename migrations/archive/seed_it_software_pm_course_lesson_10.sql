-- IT・ソフトウェア開発プロジェクトマネジメントコース
-- Lesson 10: 運用保守とインシデント管理

DO $$
DECLARE
  v_course_id INT;
  v_lesson_id INT;
BEGIN
  -- Get course ID
  SELECT id INTO v_course_id FROM courses WHERE slug = 'it-software-pm';

  -- Lesson 10: 運用保守とインシデント管理
  INSERT INTO lessons (course_id, slug, title, content, "order", created_at)
  VALUES (
    v_course_id,
    'operations-incident-management',
    '運用保守とインシデント管理',
    $CONTENT$# 運用保守とインシデント管理

運用保守は「システムを作る」ことから「システムを守り育てる」フェーズであり、**ビジネス価値の継続的な提供**が目的です。

## 運用保守の種類

### 保守の4分類（IEEE）

| 種類 | 目的 | 例 | 割合目安 |
|------|------|---|---------|
| **是正保守** | バグ修正 | 不具合対応 | 20% |
| **適応保守** | 環境変化への対応 | OS更新、法令対応 | 25% |
| **完全化保守** | 機能改善・追加 | 新機能開発 | 50% |
| **予防保守** | 将来の問題予防 | リファクタリング、性能改善 | 5% |

**トレンド：** 是正保守を減らし、完全化保守・予防保守を増やすことが理想

## インシデント管理

### インシデントとは

**定義：** サービスの標準的な運用に対する計画外の中断、またはサービス品質の低下

**例：**
- 🚨 サーバーダウン
- 🐛 重大なバグ発見
- ⚡ 性能劣化
- 🔒 セキュリティ侵害

### インシデントの重要度分類

| レベル | 定義 | 対応時間 | 例 |
|--------|------|----------|---|
| **P0（Critical）** | 全サービス停止 | 即座（15分以内） | 全ユーザーがアクセス不可 |
| **P1（High）** | 主要機能停止 | 1時間以内 | 決済機能が動作しない |
| **P2（Medium）** | 一部機能に影響 | 4時間以内 | 検索機能の精度低下 |
| **P3（Low）** | 軽微な問題 | 1営業日以内 | UI表示の軽微なバグ |

### インシデント対応プロセス

#### 1. 検知（Detection）

**検知手段：**
- 🤖 **自動監視：** アラート、ヘルスチェック
- 📞 **ユーザー報告：** サポート経由
- 👀 **手動発見：** チームメンバーの気づき

**重要：** 検知の速さが MTTR（平均復旧時間）を左右

#### 2. トリアージ（Triage）

**実施内容：**
- 📊 影響範囲の特定
- 🔴 優先度の判断
- 👤 担当者のアサイン

**判断基準：**
```
影響ユーザー数 × ビジネスインパクト = 優先度
```

#### 3. 調査（Investigation）

**手順：**
1. 📝 **再現確認：** 問題が再現できるか
2. 🔍 **ログ分析：** エラーログ、アクセスログ
3. 📊 **メトリクス確認：** CPU、メモリ、ネットワーク
4. 🕒 **タイムライン作成：** いつから発生したか

**ツール：**
- ログ分析：Kibana、Splunk
- メトリクス：Grafana、Datadog
- トレース：Jaeger、Zipkin

#### 4. 対応（Response）

**対応の種類：**

| 対応 | タイミング | 例 |
|------|-----------|---|
| **一時対応** | 即座 | サーバー再起動、機能の無効化 |
| **暫定対応** | 数時間 | ホットフィックス適用 |
| **恒久対応** | 数日〜週 | 根本原因の修正 |

**原則：** まず復旧、その後に根本対策

#### 5. 復旧（Recovery）

**確認事項：**
- ✅ サービスが正常稼働しているか
- ✅ ユーザーが正常に利用できるか
- ✅ 監視アラートが解消したか
- ✅ 副作用が発生していないか

#### 6. 事後対応（Post-Incident）

**インシデントレポート作成：**
- 📅 発生日時・検知日時
- 📊 影響範囲・影響ユーザー数
- 🔍 根本原因
- 🔧 対応内容
- 📈 再発防止策

### オンコール体制

#### オンコール（On-Call）とは

**定義：** 業務時間外も対応できるよう待機すること

**体制例：**
```
一次対応：運用チーム（24時間365日）
    ↓
二次対応：開発チーム（ローテーション）
    ↓
三次対応：シニアエンジニア・アーキテクト
```

#### オンコールのベストプラクティス

**負担の軽減：**
- 🔄 **ローテーション：** 1週間交代など
- 💰 **手当支給：** オンコール手当、対応実績手当
- ⏰ **代休付与：** 夜間対応後の休暇
- 🤖 **自動化：** 自動復旧、ランブック（手順書）

**スキル向上：**
- 📚 **ランブック整備：** 対応手順の文書化
- 🎓 **トレーニング：** 模擬インシデント訓練
- 👥 **ペアオンコール：** 新人とベテランのペア

## ポストモーテム（事後分析）

### ポストモーテムとは

**定義：** インシデント後に行う振り返り会議

**目的：**
- 🔍 根本原因の特定
- 📚 学びの共有
- 🛡️ 再発防止策の策定

### Blameless Postmortem（非難しない振り返り）

**原則：**
- 🚫 **個人を責めない：** 「誰が悪いか」ではなく「何が悪いか」
- 🎯 **システムの改善：** プロセスと仕組みに焦点
- 📚 **学習機会：** 失敗から学ぶ文化

**悪い例：**
❌ 「エンジニアAがミスしたから障害が起きた」

**良い例：**
✅ 「デプロイ前のチェックリストに重要項目が抜けていた。チェックリストを改善し、自動チェックを追加する」

### ポストモーテムドキュメント

**テンプレート：**

```markdown
# インシデント報告：サービス停止（2024-03-15）

## サマリー
- 発生日時：2024-03-15 14:30 JST
- 検知日時：2024-03-15 14:35 JST
- 復旧日時：2024-03-15 16:20 JST
- 影響時間：1時間50分
- 影響範囲：全ユーザー（約10万人）

## 影響
- サービス全停止
- 決済トランザクション 500件 が未処理
- 推定売上損失：約200万円

## タイムライン
- 14:30 - データベースの接続数が上限に達する
- 14:35 - 監視アラート発火、オンコールエンジニアに通知
- 14:40 - 調査開始、DBコネクション枯渇を確認
- 15:00 - 一時対応：アプリケーション再起動
- 15:30 - 暫定対応：コネクションプール設定を拡大
- 16:00 - サービス復旧確認
- 16:20 - 完全復旧を宣言

## 根本原因
新機能デプロイ時に、DBコネクションを適切にクローズしない
コードが含まれており、コネクションリークが発生。
アクセス増加に伴いコネクションプールが枯渇した。

## 対応内容
- 一時対応：アプリケーション再起動でコネクション解放
- 暫定対応：コネクションプール上限を増加
- 恒久対応：コネクションリークのコード修正

## 再発防止策
1. コードレビューチェックリストに「リソースリーク」を追加
2. 負荷テストでコネクション数を監視する項目を追加
3. DBコネクション数の監視アラートを設定（80%で警告）
4. リソースリークを検出する静的解析ツールの導入

## 学んだこと
- 新機能のデプロイ前に、負荷テストでリソース使用状況を
  確認する重要性を再認識
- コネクションプール設定が適切でなかった
```

## SRE（Site Reliability Engineering）

### SREとは

**定義：** Googleが提唱した、ソフトウェアエンジニアリングのアプローチで運用を行う手法

**原則：**
- 🤖 **運用の自動化：** トイルの削減
- 📊 **SLI/SLO/SLAの設定：** 目標の明確化
- 💰 **エラーバジェット：** リスクと速度のバランス
- 📚 **ポストモーテム文化：** 学習する組織

### SLI/SLO/SLA

#### SLI（Service Level Indicator）

**定義：** サービスレベルの測定指標

**例：**
- ⏱️ 可用性：稼働時間 / 全時間
- 🚀 レイテンシ：95パーセンタイルの応答時間
- ✅ 成功率：成功リクエスト / 全リクエスト

#### SLO（Service Level Objective）

**定義：** SLIの目標値

**例：**
- 可用性 SLO：99.9%以上
- レイテンシ SLO：95パーセンタイルで500ms以下
- 成功率 SLO：99.95%以上

#### SLA（Service Level Agreement）

**定義：** 顧客との契約上の合意

**例：**
- 可用性 99.9%を保証
- 未達成時は利用料の10%を返金

**関係：**
```
SLA（契約） ≦ SLO（目標） < SLI（実測値）
  99.9%       99.95%       99.97%
```

### エラーバジェット

**概念：**
- SLOを100%にすることは目標ではない
- 100% - SLO = エラーバジェット（失敗の許容量）

**例：**
- SLO：99.9%
- エラーバジェット：0.1% = 月43分のダウンタイム許容

**活用：**
- ✅ **バジェット内：** 新機能開発にリソースを投入
- ❌ **バジェット超過：** 信頼性向上にリソースをシフト

**効果：**
- 🎯 リスクと速度のバランス
- 📊 データに基づく意思決定
- 🤝 開発と運用の共通言語

## トイル（Toil）の削減

### トイルとは

**定義：** 手作業で、反復的で、自動化可能で、戦術的で、長期的価値のない運用作業

**例：**
- ❌ 毎朝サーバーを手動で再起動
- ❌ ログを手動でダウンロードして分析
- ❌ 同じ設定を複数サーバーに手動でコピー

### トイル削減の手法

**自動化の段階：**

| レベル | 説明 | 例 |
|--------|------|---|
| **手動** | 全て手作業 | コマンドを手で入力 |
| **半自動** | スクリプト化 | スクリプト実行 |
| **自動** | トリガーで実行 | Cron、イベント駆動 |
| **セルフサービス** | ユーザーが自分で実行 | 管理画面から操作 |

**優先順位付け：**
1. 📊 **頻度 × 時間：** よく実行される作業
2. 🚨 **リスク：** ミスの影響が大きい作業
3. 😓 **ストレス：** 精神的負担が大きい作業

## 変更管理

### 変更管理プロセス

**目的：** 計画的な変更によりリスクを最小化

**プロセス：**
1. 📝 **変更申請：** RFC（Request for Change）
2. 🔍 **影響評価：** リスク分析
3. ✅ **承認：** CAB（Change Advisory Board）
4. 📅 **スケジュール：** 変更ウィンドウの設定
5. 🚀 **実施：** 変更の実行
6. ✅ **検証：** 変更の確認
7. 📝 **完了報告：** 結果の記録

### 変更の種類

| 種類 | リスク | 承認プロセス | 例 |
|------|--------|-------------|---|
| **標準的変更** | 低 | 事前承認済み | パッチ適用 |
| **通常変更** | 中 | CAB承認必要 | 機能追加 |
| **緊急変更** | 高 | 簡易承認 | ホットフィックス |

### 変更ウィンドウ

**定義：** 変更を許可する時間帯

**例：**
- 📅 通常変更：毎週火曜 22:00-24:00
- 🚨 緊急変更：随時（承認必要）
- 🚫 凍結期間：年末年始、繁忙期

## 運用の成熟度モデル

### レベル1: リアクティブ（反応的）

- 🔥 **特徴：** 問題が起きてから対応
- ❌ **監視：** 最小限またはなし
- 📝 **ドキュメント：** 不十分
- 😓 **負担：** 高い

### レベル2: プロアクティブ（予防的）

- 📊 **特徴：** 監視により早期発見
- ✅ **監視：** 基本的なメトリクス
- 📚 **ドキュメント：** ランブック整備
- 🔧 **負担：** 中程度

### レベル3: 自動化

- 🤖 **特徴：** 多くの作業が自動化
- 📊 **監視：** 包括的な監視・アラート
- 🔄 **自動復旧：** 一部問題は自動解決
- 😊 **負担：** 低い

### レベル4: SRE実践

- 🎯 **特徴：** SLO/エラーバジェット運用
- 📈 **継続改善：** データドリブンな改善
- 🤖 **高度な自動化：** セルフヒーリング
- 🌟 **負担：** 最小限

## コミュニケーションとステータスページ

### インシデント時のコミュニケーション

**原則：**
- ⏱️ **迅速：** 検知後15分以内に第一報
- 📢 **透明：** 状況を正直に共有
- 🔄 **定期更新：** 30分〜1時間ごと
- ✅ **完了報告：** 復旧後の総括

### ステータスページ

**目的：** ユーザーにサービス状況を公開

**含める情報：**
- 🟢 **現在の状況：** 正常 / 部分的障害 / 障害
- 📅 **インシデント履歴：** 過去の障害
- 📊 **稼働率：** 過去30日、90日の実績
- 📝 **メンテナンス予定：** 計画的な停止

**ツール：**
- Statuspage.io
- Atlassian Statuspage
- 自作ダッシュボード

💡 **運用保守は「守り」ではなく「育てる」仕事です。自動化、監視、継続的改善により、トイルを削減し、エンジニアが価値ある仕事に集中できる環境を作ることが、長期的なサービスの成功につながります。**$CONTENT$,
    10,
    NOW()
  ) RETURNING id INTO v_lesson_id;

  -- Lesson 10: Questions (ひっかけ問題スタイル)
  INSERT INTO questions (lesson_id, type, question, options, correct_answer, explanation, "order", created_at)
  VALUES
    (v_lesson_id, 'multiple-choice', 'インシデント対応で「まず復旧、その後に根本対策」という原則の最も重要な理由はどれですか？',
     ARRAY['根本対策には時間がかかるため、復旧を優先することで影響時間を最小化する', '復旧は簡単だが根本対策は難しいため、簡単な方から先に実施する', '復旧を先に行うことで、チームのモチベーションを維持できる', '根本対策の前に復旧することが、インシデント管理の手順書に書かれているため'],
     ARRAY['根本対策には時間がかかるため、復旧を優先することで影響時間を最小化する'],
     'Aが正解です。インシデント対応の最優先事項は「ユーザーへの影響最小化」であり、サービス復旧が最も重要です。根本対策（例：コードの書き直し、アーキテクチャ変更）には時間がかかるため、まず一時対応（再起動、機能無効化など）で復旧し、その後に時間をかけて根本対策を行います。Bは誤解（簡単さではなく影響範囲）、Cは副次的効果、Dは手順に従うだけでは本質を理解していません。MTTR短縮が鍵です。',
     1, NOW()),
    (v_lesson_id, 'multiple-answer', 'Blameless Postmortem（非難しない振り返り）で重視すべき観点を全て選択してください。',
     ARRAY['誰がミスをしたかを明確にし、再発防止のための個人への指導を行う', 'なぜそのミスが起きたのかのシステム的な原因を分析する', 'チェックリストやプロセスの改善により、同じミスが起きない仕組みを作る', '今回のインシデントから得られた学びをチーム全体で共有する'],
     ARRAY['なぜそのミスが起きたのかのシステム的な原因を分析する', 'チェックリストやプロセスの改善により、同じミスが起きない仕組みを作る', '今回のインシデントから得られた学びをチーム全体で共有する'],
     'B、C、Dがブレームレスポストモーテムの観点です。Aの「個人の特定と指導」は真逆のアプローチで、心理的安全性を損ない、今後インシデントが隠蔽されるリスクがあります。ブレームレスの本質は「人ではなくシステムを改善」することで、Bのシステム的原因分析、Cのプロセス改善、Dの学習共有が重要です。個人を責めることは再発防止に繋がらず、むしろ組織の学習を阻害します。',
     2, NOW()),
    (v_lesson_id, 'multiple-choice', 'SREにおける「エラーバジェット」の最も重要な目的はどれですか？',
     ARRAY['月に何回までエラーを起こしてよいかの上限を設定し、それを超えたら罰則を与える', 'SLOを100%にする必要はないことを示し、信頼性と開発スピードのバランスを取る', 'エラーが発生した際の損失額を事前に計算し、予算化する', 'サービスの品質目標を顧客に約束し、契約上の義務とする'],
     ARRAY['SLOを100%にする必要はないことを示し、信頼性と開発スピードのバランスを取る'],
     'Bが正解です。エラーバジェットは「100% - SLO」で計算され、その範囲内であれば新機能開発にリソースを投入でき、超過したら信頼性向上にシフトします。これにより、過度に保守的になること（100%を目指して新機能が出せない）と、無謀なリリース（品質無視）のバランスを取ります。Aの罰則、Cの損失額計算、Dの契約義務（それはSLA）は誤解です。エラーバジェットはリスクと速度の最適化ツールです。',
     3, NOW()),
    (v_lesson_id, 'multiple-answer', '「トイル」として分類すべき運用作業の特徴を全て選択してください。',
     ARRAY['毎朝同じ手順でサーバーの状態を確認し、問題があれば手動で再起動する', 'ユーザーからの問い合わせに対して、個別の状況を調査し、カスタマイズした回答を提供する', '月次レポート作成のため、同じSQLクエリを実行してExcelに貼り付ける作業', '新機能の設計について、チームでブレインストーミングを行う'],
     ARRAY['毎朝同じ手順でサーバーの状態を確認し、問題があれば手動で再起動する', '月次レポート作成のため、同じSQLクエリを実行してExcelに貼り付ける作業'],
     'AとCがトイルです。トイルは「手作業・反復的・自動化可能・長期的価値なし」の作業で、Aの定型チェック・再起動、Cの定型レポート作成が該当します。Bの個別調査・カスタマイズ回答は判断が必要で自動化困難、Dのブレインストーミングは創造的作業でトイルではありません。トイルの削減（自動化）により、エンジニアは価値ある仕事（設計、問題解決）に集中できます。全ての運用作業がトイルではないことを理解すべきです。',
     4, NOW()),
    (v_lesson_id, 'multiple-choice', 'オンコール体制で最も重要な設計原則はどれですか？',
     ARRAY['オンコール担当者は24時間365日いつでも対応できるよう、休暇を取らないようにする', 'オンコール対応の負担を軽減するため、ローテーション・自動化・ランブック整備を行う', 'オンコール対応は上級エンジニアのみが行い、ジュニアエンジニアには任せない', 'オンコール手当を高額に設定し、金銭的インセンティブで対応の質を高める'],
     ARRAY['オンコール対応の負担を軽減するため、ローテーション・自動化・ランブック整備を行う'],
     'Bが正解です。オンコールは必要ですが、過度な負担はバーンアウトを招くため、持続可能な体制設計が重要です。ローテーション（負担分散）、自動化（トイル削減）、ランブック（対応の標準化・スキル移転）により負担を軽減します。Aは人権侵害レベルで論外、Cはスキル移転の機会を失い属人化、Dは金銭だけでは持続可能性は確保できません。長期的に機能する体制づくりが鍵です。',
     5, NOW());

END $$;
