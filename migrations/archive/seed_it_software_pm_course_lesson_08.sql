-- IT・ソフトウェア開発プロジェクトマネジメントコース
-- Lesson 8: チームビルディングと開発者育成

DO $$
DECLARE
  v_course_id INT;
  v_lesson_id INT;
BEGIN
  -- Get course ID
  SELECT id INTO v_course_id FROM courses WHERE slug = 'it-software-pm';

  -- Lesson 8: チームビルディングと開発者育成
  INSERT INTO lessons (course_id, slug, title, content, "order", created_at)
  VALUES (
    v_course_id,
    'team-building-developer-growth',
    'チームビルディングと開発者育成',
    $CONTENT$# チームビルディングと開発者育成

高パフォーマンスチームは偶然生まれるのではなく、**意図的なチームビルディングと継続的な育成**によって作られます。

## チーム発達の段階モデル

### タックマンモデル

チームは5つの段階を経て成熟します：

#### 1. 形成期（Forming）

**特徴：**
- 👥 メンバーが初めて集まる
- 🤝 礼儀正しいが表面的な関係
- ❓ 役割や目標が不明確
- 🎯 リーダーへの依存度が高い

**PMの役割：**
- 📋 明確な目標とビジョンの提示
- 👤 役割と責任の明確化
- 🗓️ キックオフミーティングの開催
- 📝 チーム憲章の作成

#### 2. 混乱期（Storming）

**特徴：**
- 💢 意見の衝突・対立が発生
- 🔥 権限や役割への不満
- 😓 ストレスと不安の増大
- ⚔️ サブグループの形成

**PMの役割：**
- 🗣️ オープンなコミュニケーション促進
- ⚖️ 公平な調停
- 🎯 共通の目標への再フォーカス
- ✅ 小さな成功体験の創出

**重要：** この段階は避けられない。適切に対処すれば次へ進める

#### 3. 規範期（Norming）

**特徴：**
- 🤝 相互理解と信頼の構築
- 📋 ルールと規範の確立
- 💪 チームとしての一体感
- 🔄 協力的な関係

**PMの役割：**
- ✅ 良い行動の強化・認識
- 📚 ナレッジ共有の促進
- 🎯 チーム自治の支援
- 🔄 振り返りと改善

#### 4. 機能期（Performing）

**特徴：**
- ⚡ 高い生産性
- 🎯 自己組織化
- 💡 創造的な問題解決
- 🤝 相互サポート

**PMの役割：**
- 🛡️ 障害の除去
- 🎯 挑戦的な目標の提供
- 🌟 成果の認識と祝福
- 🔄 継続的改善の支援

#### 5. 散会期（Adjourning）

**特徴：**
- 🎊 プロジェクト完了
- 😢 別れの感傷
- 📊 成果の振り返り

**PMの役割：**
- 🎉 チームの成果を称賛
- 📚 教訓の文書化
- 🔄 次のプロジェクトへの引き継ぎ

## チームビルディングの実践

### 心理的安全性の構築

**心理的安全性とは：**
> チームメンバーが対人リスク（批判・拒絶・罰）を恐れずに、自分の意見を表明できる状態

#### 心理的安全性の4つの要素

| 要素 | 説明 | 実践例 |
|------|------|--------|
| **発言の安全性** | 意見を言っても大丈夫 | 会議で全員が発言する時間を設ける |
| **質問の安全性** | 分からないことを聞ける | 「質問歓迎」の文化醸成 |
| **失敗の安全性** | 失敗しても責められない | ポストモーテムで非難しない |
| **挑戦の安全性** | 新しいことに挑戦できる | 実験的な取り組みを奨励 |

#### 心理的安全性を高める行動

**リーダーの行動：**
- 🗣️ **自分から弱みを見せる：** 「私も分からない」と言える
- 👂 **傾聴する：** 話を最後まで聞き、理解を示す
- ❓ **質問を歓迎する：** 「良い質問だね」と肯定
- 🚫 **非難しない：** 失敗を学びの機会にする
- 🎯 **異なる意見を求める：** 「他の見方はないか？」

**チームの規範：**
- 📋 **ラスベガスルール：** レトロで話したことは外に出さない
- 🤝 **No Blame Culture：** 人ではなくプロセスを改善
- 💡 **Stupid Question禁止：** 全ての質問を歓迎
- 🎯 **建設的な批判：** 批判は改善提案とセットで

### チーム規範とワーキングアグリーメント

**ワーキングアグリーメントの例：**

```markdown
## コミュニケーション
- SlackのDMは24時間以内に返信
- 緊急時は電話OK（夜間・休日は本当に緊急の場合のみ）
- 会議は必ずアジェンダを事前共有

## コード
- プルリクエストは24時間以内にレビュー
- テストカバレッジ80%以上
- コードスタイルはPrettierに従う

## 勤務時間
- コアタイム：10:00-15:00
- 会議は原則コアタイム内
- 夜間・休日の作業は推奨しない

## 振り返り
- 毎週金曜15:00〜レトロスペクティブ
- 全員が発言する
- アクションアイテムは次週フォロー
```

### ダイバーシティ（多様性）の活用

#### 多様性の種類

| 種類 | 説明 | メリット |
|------|------|----------|
| **表層的多様性** | 性別・年齢・国籍など | 多様な視点、市場理解 |
| **深層的多様性** | 価値観・経験・専門性 | 創造性、問題解決力 |

#### 多様性を活かすための実践

- 🌍 **インクルージョン：** 全員が参加できる環境
- 🗣️ **多言語対応：** 非母国語話者への配慮
- ⏰ **時差への配慮：** グローバルチームの会議時間
- 📚 **文化理解：** 文化的背景の尊重

## モチベーション管理

### 内発的動機づけ vs 外発的動機づけ

| 種類 | 要因 | 効果 |
|------|------|------|
| **外発的** | 報酬・昇進・称賛 | 短期的、単純作業に有効 |
| **内発的** | 自律性・成長・目的 | 長期的、創造的作業に有効 |

### 自己決定理論（SDT）

エンジニアのモチベーションに必要な3要素：

#### 1. 自律性（Autonomy）

**意味：** 自分で決定できる

**実践：**
- 🎯 「何を作るか」ではなく「何を達成するか」を指示
- 🔧 技術選定の自由度
- ⏰ 働き方の柔軟性（リモート、フレックス）
- 💡 自主的な改善活動の奨励

**悪い例：** 「この方法でコーディングしてください」
**良い例：** 「この機能を実現してください。方法は任せます」

#### 2. 有能感（Competence）

**意味：** 成長している実感

**実践：**
- 🎯 適度に挑戦的なタスク（Stretch Assignment）
- 📊 進捗と成果の可視化
- 🎓 学習機会の提供
- 👏 達成の承認と祝福

**フロー状態の創出：**
```
        高難易度
         ↑
   不安   |  フロー
 低───────┼───────高  スキル
   退屈   |  リラックス
         ↓
        低難易度
```

#### 3. 関係性（Relatedness）

**意味：** チームとのつながり

**実践：**
- 👥 ペアプログラミング・モブプログラミング
- 🎉 チームイベント（ランチ、懇親会）
- 🗣️ 1on1での信頼関係構築
- 🎯 共通目標への取り組み

### エンジニア特有のモチベーション要因

| 要因 | 説明 | 対応 |
|------|------|------|
| **技術的好奇心** | 新しい技術に触れたい | 技術調査時間、カンファレンス参加 |
| **職人気質** | 良いコードを書きたい | リファクタリング時間、技術的負債の解消 |
| **社会貢献** | 世の中の役に立ちたい | プロダクトのビジョン共有、ユーザー事例紹介 |
| **承認欲求** | 技術力を認められたい | 技術ブログ、社内LT、オープンソース貢献 |

## 開発者の育成

### キャリアパスの設計

#### 2つのキャリアトラック

**技術トラック：**
```
Junior Engineer
    ↓
Mid-level Engineer
    ↓
Senior Engineer
    ↓
Staff Engineer / Principal Engineer
    ↓
Distinguished Engineer / Fellow
```

**マネジメントトラック：**
```
Engineer
    ↓
Tech Lead
    ↓
Engineering Manager
    ↓
Director of Engineering
    ↓
VP of Engineering / CTO
```

**重要：** 両トラックが同等に評価される仕組み

#### スキルマトリクス

| レベル | 技術力 | 問題解決 | 影響範囲 | 自律性 |
|-------|-------|----------|---------|--------|
| Junior | 基礎知識 | 定義された問題 | 自タスク | 指示が必要 |
| Mid | 実践的技術 | 複雑な問題 | チーム内 | ほぼ自律 |
| Senior | 深い専門性 | 曖昧な問題 | 複数チーム | 完全自律 |
| Staff | 幅広い知見 | 戦略的問題 | 組織横断 | リーダーシップ |

### 育成手法

#### 1. OJT（On-the-Job Training）

**ペアプログラミング：**
- 👥 2人で1つのコードを書く
- 🔄 ドライバー（書く人）とナビゲーター（考える人）を交代
- 📚 リアルタイムでの知識共有

**コードレビュー：**
- 📝 レビューコメントで学び合う
- 🎯 単なる指摘ではなく、理由を説明
- 💡 良いコードを称賛し、パターンを共有

**モブプログラミング：**
- 👥 チーム全員で1つのコードを書く
- 🔄 短時間（10-15分）で運転手を交代
- 📚 集合知を活用

#### 2. Off-JT（Off-the-Job Training）

**社内勉強会：**
- 📚 週1回のテックランチ
- 🎤 輪番制での発表
- 💬 書籍読書会

**外部トレーニング：**
- 🎓 オンライン講座（Udemy、Coursera）
- 🏫 研修・ワークショップ参加
- 🎫 カンファレンス参加

**資格取得支援：**
- 💰 受験費用補助
- 📚 学習時間の確保
- 🎉 合格祝い金

#### 3. 自己啓発（SD: Self Development）

**20%ルール：**
- ⏰ 業務時間の20%を自由な学習に
- 💡 個人プロジェクト、OSS貢献
- 📊 成果を共有する機会

**技術ブログ：**
- 📝 学んだことをアウトプット
- 🌍 社外への情報発信
- 🎯 個人ブランディング

### 1on1ミーティング

#### 1on1の目的

- 🗣️ **信頼関係の構築**
- 📊 **キャリア支援**
- 🎯 **モチベーション管理**
- 🚨 **早期の問題発見**

❌ **ではない：** 進捗確認、評価面談

#### 1on1の実践

**頻度：** 隔週30分〜週1回

**話題の例：**
- 💡 今週良かったこと・困ったこと
- 🎯 キャリア目標と現状のギャップ
- 📚 学びたいこと・挑戦したいこと
- 😓 チームや組織への懸念
- 🙏 マネージャーへの要望

**傾聴のスキル：**
- 👂 話を遮らない
- 🔄 言い換えて確認（「つまり〜ということ？」）
- 📝 メモを取る（次回フォロー）
- ❓ オープンクエスチョン（「どう思う？」）

## パフォーマンスマネジメント

### フィードバックの技術

#### SBI モデル

**Situation（状況）：** いつ、どこで
**Behavior（行動）：** 何をしたか（観察可能な事実）
**Impact（影響）：** どんな影響があったか

**例（ポジティブ）：**
```
Situation: 昨日のコードレビューで
Behavior: あなたが丁寧に設計の意図を説明してくれたおかげで
Impact: チーム全体が設計パターンを理解できました。ありがとう！
```

**例（改善）：**
```
Situation: 今朝のスタンドアップで
Behavior: 発言が抽象的で具体的な内容が分からなかったので
Impact: チームが状況を把握できませんでした。
　　　　 次回は具体的なタスク名を伝えてもらえますか？
```

### 目標設定（OKR/MBO）

#### OKR（Objectives and Key Results）

**構造：**
- 📋 **Objective：** 定性的な目標（野心的）
- 📊 **Key Results：** 定量的な成果指標（3-5個）

**例：**
```
O: ユーザー体験を劇的に改善する
KR1: ページ読み込み時間を5秒から2秒に短縮
KR2: モバイル版のコンバージョン率を3%から5%に向上
KR3: ユーザー満足度スコアを70から85に向上
```

**OKRの原則：**
- 🎯 **Ambitious（野心的）：** 60-70%の達成で成功
- 📊 **Measurable（測定可能）：** 数値で評価
- 🔄 **Transparent（透明性）：** 全社に公開
- ⏱️ **Time-bound（期限）：** 四半期ごと

### パフォーマンス評価

#### 360度フィードバック

**評価者：**
- 👤 上司
- 👥 同僚（ピア）
- 👨‍💼 部下（リバース）
- 🔄 自己評価

**利点：**
- 📊 多面的な評価
- 🔍 盲点の発見
- 🎯 公平性の向上

**注意点：**
- ⚠️ 匿名性の確保
- 🎯 評価ではなく開発目的で使用
- 📝 具体的なフィードバックを求める

## リモート・ハイブリッドチームの管理

### リモートワークの課題と対策

| 課題 | 対策 |
|------|------|
| **コミュニケーション不足** | 定期的なビデオ会議、オーバーコミュニケーション |
| **孤独感** | バーチャルランチ、雑談チャンネル |
| **情報の非対称性** | ドキュメント文化、非同期コミュニケーション |
| **評価の難しさ** | 成果主義、可視化の徹底 |

### 非同期コミュニケーション

**原則：**
- 📝 **文書化：** 口頭の決定事項も記録
- ⏰ **即答を期待しない：** 24時間以内の返信でOK
- 🎯 **明確な依頼：** 5W1Hを明確に
- 🔄 **定期的な同期：** 週1回は全員で顔を合わせる

💡 **チームは組織の最小単位であり、プロジェクト成功の鍵です。心理的安全性、適切な育成、継続的なフィードバックにより、個人の成長とチームのパフォーマンス向上を両立させることができます。**$CONTENT$,
    8,
    NOW()
  ) RETURNING id INTO v_lesson_id;

  -- Lesson 8: Questions (ひっかけ問題スタイル)
  INSERT INTO questions (lesson_id, type, question, options, correct_answer, explanation, "order", created_at)
  VALUES
    (v_lesson_id, 'multiple-choice', 'タックマンモデルの「混乱期（Storming）」でチームに対立が発生した場合、PMとして最も適切な対応はどれですか？',
     ARRAY['対立は生産性を下げるため、即座に介入して対立を抑え込む', '対立はチーム発達の自然なプロセスとして受け入れ、建設的な議論を促進する', '対立するメンバーをチームから外し、協調的なメンバーに交代する', '対立が収まるまで重要な意思決定を延期し、様子を見る'],
     ARRAY['対立はチーム発達の自然なプロセスとして受け入れ、建設的な議論を促進する'],
     'Bが正解です。Stormingは避けられない発達段階であり、適切に対処すればNormingへ進めます。Aの「抑え込む」は表面的な解決で根本的な問題が残り、Cの「メンバー交代」は極端で対立の原因を解決しない、Dの「延期」は問題を先送りするだけです。対立は「意見の多様性」の表れであり、オープンな議論を通じて相互理解と信頼を構築することが重要です。対立を避けるのではなく、建設的に扱うのがPMの役割です。',
     1, NOW()),
    (v_lesson_id, 'multiple-answer', '心理的安全性を高めるためにリーダーが取るべき行動として適切なものを全て選択してください。',
     ARRAY['チームメンバーの失敗を会議で共有し、同じミスを防ぐための教訓とする', '自分自身の失敗や分からないことを率直に共有し、弱みを見せる', 'メンバーからの質問に対して「それは良い質問だ」と肯定的に反応する', 'パフォーマンスの低いメンバーを公の場で指摘し、改善を促す'],
     ARRAY['自分自身の失敗や分からないことを率直に共有し、弱みを見せる', 'メンバーからの質問に対して「それは良い質問だ」と肯定的に反応する'],
     'BとCが心理的安全性を高める行動です。Bはリーダーが弱みを見せることで「失敗や無知は恥ずかしくない」という文化を作り、Cは質問を歓迎することで「分からないことを聞いても大丈夫」という安全性を示します。Aは一見教訓的ですが、失敗を「共有される」ことへの恐怖を生み、Dの公の場での指摘は典型的な心理的安全性を損なう行動です。心理的安全性は「対人リスクを恐れない」状態であり、批判や晒し上げは逆効果です。',
     2, NOW()),
    (v_lesson_id, 'multiple-choice', '自己決定理論（SDT）における「自律性」をエンジニアに提供する方法として最も適切なのはどれですか？',
     ARRAY['毎日の作業内容を詳細に指示し、確実に成果を出せるようサポートする', '「この機能を実現してください」と目標を伝え、実装方法は任せる', 'エンジニアが好きなプロジェクトだけを選べるようにし、やりたくない仕事は割り当てない', 'チーム全体で決定を行い、個人の意見は多数決で決める'],
     ARRAY['「この機能を実現してください」と目標を伝え、実装方法は任せる'],
     'Bが正解です。自律性は「自分で決定できる」ことであり、「何を達成するか（目標）」は指示しつつ「どうやるか（方法）」は任せることで実現します。Aは過度な管理で自律性を奪い、Cは極端で組織として成り立たず、Dは多数決であり個人の自律性とは異なります。重要なのは「マイクロマネジメントしない」ことと「放任」の違いを理解することです。目標は明確に、手段は任せるがベストバランスです。',
     3, NOW()),
    (v_lesson_id, 'multiple-answer', '1on1ミーティングで扱うべき話題として適切なものを全て選択してください。',
     ARRAY['今週のタスク進捗と来週の作業計画', 'メンバーのキャリア目標と現状のスキルギャップ', 'チームや組織への懸念事項や改善提案', '四半期の業績評価とボーナス査定'],
     ARRAY['メンバーのキャリア目標と現状のスキルギャップ', 'チームや組織への懸念事項や改善提案'],
     'BとCが1on1の適切な話題です。1on1は「信頼関係構築」「キャリア支援」「モチベーション管理」が目的であり、Bのキャリア、Cの懸念・提案がこれに該当します。Aの進捗確認は日々のスタンドアップや週次ミーティングで扱うべきで、Dの評価・査定は別途評価面談で行うべきです。1on1を進捗会議や評価の場にすると、メンバーが本音を話せなくなり、信頼関係構築という本来の目的が損なわれます。',
     4, NOW()),
    (v_lesson_id, 'multiple-choice', 'SBIモデルで改善フィードバックを伝える際、最も重要な原則はどれですか？',
     ARRAY['相手の性格や能力ではなく、観察可能な具体的な行動に焦点を当てる', 'できるだけ多くの改善点を一度に伝え、効率的に成長を促す', '改善点を伝える前に、必ず良かった点を褒めてから指摘する', 'フィードバックは公の場で行い、他のメンバーも学べるようにする'],
     ARRAY['相手の性格や能力ではなく、観察可能な具体的な行動に焦点を当てる'],
     'Aが正解です。SBIのBehavior（行動）は「観察可能な事実」であり、性格や能力への批判は避けるべきです。例：❌「あなたは配慮が足りない」→ ✅「会議で発言を遮ったため、相手が話せなくなった」。Bは情報過多で相手が消化できず、Cの「サンドイッチフィードバック」は必須ではなく（むしろ褒めが形式的になる）、Dの公の場でのフィードバックは心理的安全性を損ないます。行動に焦点を当てることで、相手は防衛的にならず改善しやすくなります。',
     5, NOW());

END $$;
